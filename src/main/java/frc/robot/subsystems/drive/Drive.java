package frc.robot.subsystems.drive;

import org.littletonrobotics.junction.Logger;

import edu.wpi.first.math.MathUtil;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.kinematics.DifferentialDriveOdometry;
import edu.wpi.first.wpilibj.smartdashboard.Field2d;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

public class Drive extends SubsystemBase {

    private DriveIO io;

    // DriveIOInputsAutoLogged is auto-generated by tagging DriveIOInputs with
    // @AutoLog.
    private DriveIOInputsAutoLogged inputs = new DriveIOInputsAutoLogged();

    private DifferentialDriveOdometry odometry;
    private Pose2d currentPose = new Pose2d();
    private final Field2d field2d = new Field2d();

    public Drive(DriveIO io) {
        this.io = io;

        // Do an initial update to get initial values from sensors, in particular the
        // gyro
        io.updateInputs(inputs);

        odometry = new DifferentialDriveOdometry(Rotation2d.fromDegrees(inputs.gyroYawDegrees), new Pose2d());
        SmartDashboard.putData("Field", field2d);
    }

    @Override
    public void periodic() {
        // important!
        io.updateInputs(inputs);
        Logger.getInstance().processInputs("Drive", inputs);

        // update odometry with readings from sensors (inputs)
        currentPose = odometry.update(Rotation2d.fromDegrees(inputs.gyroYawDegrees), inputs.left1PositionMeters,
                inputs.right1PositionMeters);

        Logger.getInstance().recordOutput("Drive/Odometry/X meters", currentPose.getX());
        Logger.getInstance().recordOutput("Drive/Odometry/Y meters", currentPose.getY());
        Logger.getInstance().recordOutput("Drive/Odometry/Rotation deg", currentPose.getRotation().getDegrees());

        // plot the robot on Field2d
        // you can view the robot pose via Glass; dropdown NetworkTables ->
        // SmartDashboard -> Field2d
        field2d.setRobotPose(currentPose);
    }

    public void drive(double reverse, double forward, double rotation) {
        double left = forward - reverse + rotation;
        double right = forward - reverse - rotation;

        left = MathUtil.clamp(left, -1, 1);
        right = MathUtil.clamp(right, -1, 1);

        Logger.getInstance().recordOutput("Drive/drive method/left", left);
        Logger.getInstance().recordOutput("Drive/drive method/right", right);

        io.setVoltage(left * 12, right * 12);
    }
}
